# Семинар 9. Линейная регрессия Логистическая регрессия

import scipy.stats as stats
import numpy as np


'''
1. Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks): 
zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110], 
ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832]. 
Используя математические операции, посчитать коэффициенты линейной регрессии, приняв за X заработную плату 
(то есть, zp - признак), а за y - значения скорингового балла (то есть, ks - целевая переменная). 
Произвести расчет как с использованием intercept, так и без.
'''

zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110]) 
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
n =len(zp)

b1 = (n * np.sum(zp*ks) - np.sum(zp) * np.sum(ks)) / (n * np.sum(zp**2) - (np.sum(zp))**2)
b0 = np.mean(ks) - b1 * np.mean(zp)
print(f'Коэффициенты линейной регрессии c intercept {b1, b0}')
b2 = np.mean(zp * ks) / np.mean(zp ** 2)
print(f'Коэффициент линейной регрессии без intercept {b2}')
print('-------------------------------------------------------------------------------------')


'''
2. Посчитать коэффициент линейной регрессии при заработной плате (zp), используя градиентный спуск (без intercept).
'''

b3 = 0.1
alpha = 1e-6
for i in range(1000):
    b3 -= alpha * (2 / n) * np.sum((b3 * zp - ks) * zp)
    if i % 100 == 0:
        print ('B1 = {}'.format(b3))
print('-------------------------------------------------------------------------------------')


'''
3. (Дополнительно). Произвести вычисления как в пункте 2, но с вычислением intercept. Учесть, что изменение 
коэффициентов должно производиться на каждом шаге одновременно (то есть изменение одного коэффициента 
не должно влиять на изменение другого во время одной итерации).
'''

